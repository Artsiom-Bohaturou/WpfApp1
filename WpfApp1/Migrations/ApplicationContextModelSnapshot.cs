// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WpfApp1.Contexts;

#nullable disable

namespace WpfApp1.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AnalysisTypeConstruction", b =>
                {
                    b.Property<int>("AnalysisTypesId")
                        .HasColumnType("int")
                        .HasColumnName("analysis_types_id");

                    b.Property<int>("ConstructionsId")
                        .HasColumnType("int")
                        .HasColumnName("constructions_id");

                    b.HasKey("AnalysisTypesId", "ConstructionsId")
                        .HasName("pk_analysis_type_construction");

                    b.HasIndex("ConstructionsId")
                        .HasDatabaseName("ix_analysis_type_construction_constructions_id");

                    b.ToTable("analysis_type_construction");
                });

            modelBuilder.Entity("AssortmentAssortmentRoll", b =>
                {
                    b.Property<int>("AssortmentRollsId")
                        .HasColumnType("int")
                        .HasColumnName("assortment_rolls_id");

                    b.Property<int>("AssortmentsId")
                        .HasColumnType("int")
                        .HasColumnName("assortments_id");

                    b.HasKey("AssortmentRollsId", "AssortmentsId")
                        .HasName("pk_assortment_assortment_roll");

                    b.HasIndex("AssortmentsId")
                        .HasDatabaseName("ix_assortment_assortment_roll_assortments_id");

                    b.ToTable("assortment_assortment_roll");
                });

            modelBuilder.Entity("AssortmentMaterial", b =>
                {
                    b.Property<int>("AssortmentsId")
                        .HasColumnType("int")
                        .HasColumnName("assortments_id");

                    b.Property<int>("MaterialsId")
                        .HasColumnType("int")
                        .HasColumnName("materials_id");

                    b.HasKey("AssortmentsId", "MaterialsId")
                        .HasName("pk_assortment_material");

                    b.HasIndex("MaterialsId")
                        .HasDatabaseName("ix_assortment_material_materials_id");

                    b.ToTable("assortment_material");
                });

            modelBuilder.Entity("AssortmentParameterValue", b =>
                {
                    b.Property<int>("AssortmentsId")
                        .HasColumnType("int")
                        .HasColumnName("assortments_id");

                    b.Property<int>("ParameterValuesId")
                        .HasColumnType("int")
                        .HasColumnName("parameter_values_id");

                    b.HasKey("AssortmentsId", "ParameterValuesId")
                        .HasName("pk_assortment_parameter_value");

                    b.HasIndex("ParameterValuesId")
                        .HasDatabaseName("ix_assortment_parameter_value_parameter_values_id");

                    b.ToTable("assortment_parameter_value");
                });

            modelBuilder.Entity("ConstructionInstructionPosition", b =>
                {
                    b.Property<int>("ConstructionsId")
                        .HasColumnType("int")
                        .HasColumnName("constructions_id");

                    b.Property<int>("InstructionPositionsId")
                        .HasColumnType("int")
                        .HasColumnName("instruction_positions_id");

                    b.HasKey("ConstructionsId", "InstructionPositionsId")
                        .HasName("pk_construction_instruction_position");

                    b.HasIndex("InstructionPositionsId")
                        .HasDatabaseName("ix_construction_instruction_position_instruction_positions_id");

                    b.ToTable("construction_instruction_position");
                });

            modelBuilder.Entity("ConstructionParameterValue", b =>
                {
                    b.Property<int>("ConstructionsId")
                        .HasColumnType("int")
                        .HasColumnName("constructions_id");

                    b.Property<int>("ParameterValuesId")
                        .HasColumnType("int")
                        .HasColumnName("parameter_values_id");

                    b.HasKey("ConstructionsId", "ParameterValuesId")
                        .HasName("pk_construction_parameter_value");

                    b.HasIndex("ParameterValuesId")
                        .HasDatabaseName("ix_construction_parameter_value_parameter_values_id");

                    b.ToTable("construction_parameter_value");
                });

            modelBuilder.Entity("EquipmentMaterial", b =>
                {
                    b.Property<int>("EquipmentsId")
                        .HasColumnType("int")
                        .HasColumnName("equipments_id");

                    b.Property<int>("MaterialsId")
                        .HasColumnType("int")
                        .HasColumnName("materials_id");

                    b.HasKey("EquipmentsId", "MaterialsId")
                        .HasName("pk_equipment_material");

                    b.HasIndex("MaterialsId")
                        .HasDatabaseName("ix_equipment_material_materials_id");

                    b.ToTable("equipment_material");
                });

            modelBuilder.Entity("EquipmentParameterValue", b =>
                {
                    b.Property<int>("EquipmentsId")
                        .HasColumnType("int")
                        .HasColumnName("equipments_id");

                    b.Property<int>("ParameterValuesId")
                        .HasColumnType("int")
                        .HasColumnName("parameter_values_id");

                    b.HasKey("EquipmentsId", "ParameterValuesId")
                        .HasName("pk_equipment_parameter_value");

                    b.HasIndex("ParameterValuesId")
                        .HasDatabaseName("ix_equipment_parameter_value_parameter_values_id");

                    b.ToTable("equipment_parameter_value");
                });

            modelBuilder.Entity("InstructionGroupPositionInstructionPosition", b =>
                {
                    b.Property<int>("InstructionGroupPositionsId")
                        .HasColumnType("int")
                        .HasColumnName("instruction_group_positions_id");

                    b.Property<int>("InstructionPositionsId")
                        .HasColumnType("int")
                        .HasColumnName("instruction_positions_id");

                    b.HasKey("InstructionGroupPositionsId", "InstructionPositionsId")
                        .HasName("pk_instruction_group_position_instruction_position");

                    b.HasIndex("InstructionPositionsId")
                        .HasDatabaseName("ix_instruction_group_position_instruction_position_instruction_~");

                    b.ToTable("instruction_group_position_instruction_position");
                });

            modelBuilder.Entity("MaterialGroupMaterialSubgroup", b =>
                {
                    b.Property<int>("MaterialGroupsId")
                        .HasColumnType("int")
                        .HasColumnName("material_groups_id");

                    b.Property<int>("MaterialSubgroupsId")
                        .HasColumnType("int")
                        .HasColumnName("material_subgroups_id");

                    b.HasKey("MaterialGroupsId", "MaterialSubgroupsId")
                        .HasName("pk_material_group_material_subgroup");

                    b.HasIndex("MaterialSubgroupsId")
                        .HasDatabaseName("ix_material_group_material_subgroup_material_subgroups_id");

                    b.ToTable("material_group_material_subgroup");
                });

            modelBuilder.Entity("MaterialMaterialSubgroup", b =>
                {
                    b.Property<int>("MaterialSubgroupsId")
                        .HasColumnType("int")
                        .HasColumnName("material_subgroups_id");

                    b.Property<int>("MaterialsId")
                        .HasColumnType("int")
                        .HasColumnName("materials_id");

                    b.HasKey("MaterialSubgroupsId", "MaterialsId")
                        .HasName("pk_material_material_subgroup");

                    b.HasIndex("MaterialsId")
                        .HasDatabaseName("ix_material_material_subgroup_materials_id");

                    b.ToTable("material_material_subgroup");
                });

            modelBuilder.Entity("MaterialParameterValue", b =>
                {
                    b.Property<int>("MaterialsId")
                        .HasColumnType("int")
                        .HasColumnName("materials_id");

                    b.Property<int>("ParameterValuesId")
                        .HasColumnType("int")
                        .HasColumnName("parameter_values_id");

                    b.HasKey("MaterialsId", "ParameterValuesId")
                        .HasName("pk_material_parameter_value");

                    b.HasIndex("ParameterValuesId")
                        .HasDatabaseName("ix_material_parameter_value_parameter_values_id");

                    b.ToTable("material_parameter_value");
                });

            modelBuilder.Entity("MeasurementUnitMeasurementUnitGroup", b =>
                {
                    b.Property<int>("MeasurementUnitGroupsId")
                        .HasColumnType("int")
                        .HasColumnName("measurement_unit_groups_id");

                    b.Property<int>("MeasurementUnitsId")
                        .HasColumnType("int")
                        .HasColumnName("measurement_units_id");

                    b.HasKey("MeasurementUnitGroupsId", "MeasurementUnitsId")
                        .HasName("pk_measurement_unit_measurement_unit_group");

                    b.HasIndex("MeasurementUnitsId")
                        .HasDatabaseName("ix_measurement_unit_measurement_unit_group_measurement_units_id");

                    b.ToTable("measurement_unit_measurement_unit_group");
                });

            modelBuilder.Entity("ParameterParameterGroup", b =>
                {
                    b.Property<int>("ParameterGroupId")
                        .HasColumnType("int")
                        .HasColumnName("parameter_group_id");

                    b.Property<int>("ParametersId")
                        .HasColumnType("int")
                        .HasColumnName("parameters_id");

                    b.HasKey("ParameterGroupId", "ParametersId")
                        .HasName("pk_parameter_parameter_group");

                    b.HasIndex("ParametersId")
                        .HasDatabaseName("ix_parameter_parameter_group_parameters_id");

                    b.ToTable("parameter_parameter_group");
                });

            modelBuilder.Entity("ParameterValuePrefix", b =>
                {
                    b.Property<int>("ParameterValuesId")
                        .HasColumnType("int")
                        .HasColumnName("parameter_values_id");

                    b.Property<int>("PrefixesPrefixId")
                        .HasColumnType("int")
                        .HasColumnName("prefixes_prefix_id");

                    b.HasKey("ParameterValuesId", "PrefixesPrefixId")
                        .HasName("pk_parameter_value_prefix");

                    b.HasIndex("PrefixesPrefixId")
                        .HasDatabaseName("ix_parameter_value_prefix_prefixes_prefix_id");

                    b.ToTable("parameter_value_prefix");
                });

            modelBuilder.Entity("ParameterValueProject", b =>
                {
                    b.Property<int>("ParameterValuesId")
                        .HasColumnType("int")
                        .HasColumnName("parameter_values_id");

                    b.Property<int>("ProjectsId")
                        .HasColumnType("int")
                        .HasColumnName("projects_id");

                    b.HasKey("ParameterValuesId", "ProjectsId")
                        .HasName("pk_parameter_value_project");

                    b.HasIndex("ProjectsId")
                        .HasDatabaseName("ix_parameter_value_project_projects_id");

                    b.ToTable("parameter_value_project");
                });

            modelBuilder.Entity("ParameterValueTechnology", b =>
                {
                    b.Property<int>("ParameterValuesId")
                        .HasColumnType("int")
                        .HasColumnName("parameter_values_id");

                    b.Property<int>("TechnologiesId")
                        .HasColumnType("int")
                        .HasColumnName("technologies_id");

                    b.HasKey("ParameterValuesId", "TechnologiesId")
                        .HasName("pk_parameter_value_technology");

                    b.HasIndex("TechnologiesId")
                        .HasDatabaseName("ix_parameter_value_technology_technologies_id");

                    b.ToTable("parameter_value_technology");
                });

            modelBuilder.Entity("ParameterValueTechnologyProcess", b =>
                {
                    b.Property<int>("ParameterValuesId")
                        .HasColumnType("int")
                        .HasColumnName("parameter_values_id");

                    b.Property<int>("TechnologyProcessesId")
                        .HasColumnType("int")
                        .HasColumnName("technology_processes_id");

                    b.HasKey("ParameterValuesId", "TechnologyProcessesId")
                        .HasName("pk_parameter_value_technology_process");

                    b.HasIndex("TechnologyProcessesId")
                        .HasDatabaseName("ix_parameter_value_technology_process_technology_processes_id");

                    b.ToTable("parameter_value_technology_process");
                });

            modelBuilder.Entity("PrefixTechnologyProcess", b =>
                {
                    b.Property<int>("PrefixesPrefixId")
                        .HasColumnType("int")
                        .HasColumnName("prefixes_prefix_id");

                    b.Property<int>("TechnologyProcessesId")
                        .HasColumnType("int")
                        .HasColumnName("technology_processes_id");

                    b.HasKey("PrefixesPrefixId", "TechnologyProcessesId")
                        .HasName("pk_prefix_technology_process");

                    b.HasIndex("TechnologyProcessesId")
                        .HasDatabaseName("ix_prefix_technology_process_technology_processes_id");

                    b.ToTable("prefix_technology_process");
                });

            modelBuilder.Entity("TechnologyTechnologyProcess", b =>
                {
                    b.Property<int>("TechnologiesId")
                        .HasColumnType("int")
                        .HasColumnName("technologies_id");

                    b.Property<int>("TechnologyProcessesId")
                        .HasColumnType("int")
                        .HasColumnName("technology_processes_id");

                    b.HasKey("TechnologiesId", "TechnologyProcessesId")
                        .HasName("pk_technology_technology_process");

                    b.HasIndex("TechnologyProcessesId")
                        .HasDatabaseName("ix_technology_technology_process_technology_processes_id");

                    b.ToTable("technology_technology_process");
                });

            modelBuilder.Entity("WpfApp1.Models.AnalysisType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExecutableFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("executable_file_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("parameters");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_analysis_types");

                    b.ToTable("analysis_types");
                });

            modelBuilder.Entity("WpfApp1.Models.Assortment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<float?>("ReadyPercentage")
                        .HasColumnType("float")
                        .HasColumnName("ready_percentage");

                    b.Property<string>("Slide2DFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("slide2_dfile_path");

                    b.Property<string>("Slide3DFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("slide3_dfile_path");

                    b.Property<string>("SlideXYZFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("slide_xyz_file_path");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_assortments");

                    b.ToTable("assortments");
                });

            modelBuilder.Entity("WpfApp1.Models.AssortmentRoll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_assortment_rolls");

                    b.ToTable("assortment_rolls");
                });

            modelBuilder.Entity("WpfApp1.Models.Blueprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .HasColumnType("longtext")
                        .HasColumnName("link");

                    b.Property<string>("Slide")
                        .HasColumnType("longtext")
                        .HasColumnName("slide");

                    b.HasKey("Id")
                        .HasName("pk_blueprints");

                    b.ToTable("blueprints");
                });

            modelBuilder.Entity("WpfApp1.Models.Build", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .HasColumnType("longtext")
                        .HasColumnName("link");

                    b.Property<string>("Slide")
                        .HasColumnType("longtext")
                        .HasColumnName("slide");

                    b.HasKey("Id")
                        .HasName("pk_builds");

                    b.ToTable("builds");
                });

            modelBuilder.Entity("WpfApp1.Models.ConnectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_connection_types");

                    b.ToTable("connection_types");
                });

            modelBuilder.Entity("WpfApp1.Models.Construction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FormulaXlsFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("formula_xls_file_path");

                    b.Property<string>("ModelXlsFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("model_xls_file_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int?>("Picture2DCount")
                        .HasColumnType("int")
                        .HasColumnName("picture2_dcount");

                    b.Property<string>("Picture2DFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("picture2_dfile_path");

                    b.Property<string>("Picture3DFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("picture3_dfile_path");

                    b.Property<string>("PositionNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("position_number");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<float?>("ReadyPercentage")
                        .HasColumnType("float")
                        .HasColumnName("ready_percentage");

                    b.Property<string>("Reference2DFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reference2_dfile_path");

                    b.Property<string>("Reference3DFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reference3_dfile_path");

                    b.Property<string>("SmallPictureFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("small_picture_file_path");

                    b.Property<string>("SmallReferenceFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("small_reference_file_path");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_constructions");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_constructions_project_id");

                    b.ToTable("constructions");
                });

            modelBuilder.Entity("WpfApp1.Models.ConstructionDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConstructionId")
                        .HasColumnType("int")
                        .HasColumnName("construction_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("int")
                        .HasColumnName("sequence_number");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_construction_documents");

                    b.HasIndex("ConstructionId")
                        .HasDatabaseName("ix_construction_documents_construction_id");

                    b.ToTable("construction_documents");
                });

            modelBuilder.Entity("WpfApp1.Models.ConstructionIncidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Applicability")
                        .HasColumnType("int")
                        .HasColumnName("applicability");

                    b.Property<int>("ConstructionId")
                        .HasColumnType("int")
                        .HasColumnName("construction_id");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int")
                        .HasColumnName("sequence");

                    b.HasKey("Id")
                        .HasName("pk_construction_incidences");

                    b.HasIndex("ConstructionId")
                        .HasDatabaseName("ix_construction_incidences_construction_id");

                    b.ToTable("construction_incidences");
                });

            modelBuilder.Entity("WpfApp1.Models.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<float?>("ReadyPercentage")
                        .HasColumnType("float")
                        .HasColumnName("ready_percentage");

                    b.Property<string>("SlideFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("slide_file_path");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_equipments");

                    b.ToTable("equipments");
                });

            modelBuilder.Entity("WpfApp1.Models.Export", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_exports");

                    b.ToTable("exports");
                });

            modelBuilder.Entity("WpfApp1.Models.InstructionGroupPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_instruction_group_positions");

                    b.ToTable("instruction_group_positions");
                });

            modelBuilder.Entity("WpfApp1.Models.InstructionPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FormulaXlsFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("formula_xls_file_path");

                    b.Property<string>("ModelXlsFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("model_xls_file_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Picture2DFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("picture2_dfile_path");

                    b.Property<string>("Picture3DFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("picture3_dfile_path");

                    b.Property<string>("Reference2DFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reference2_dfile_path");

                    b.Property<string>("Reference3DFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("reference3_dfile_path");

                    b.Property<string>("SmallPictureFilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("small_picture_file_path");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_instruction_positions");

                    b.ToTable("instruction_positions");
                });

            modelBuilder.Entity("WpfApp1.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("mark");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<float?>("ReadyPercentage")
                        .HasColumnType("float")
                        .HasColumnName("ready_percentage");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_materials");

                    b.ToTable("materials");
                });

            modelBuilder.Entity("WpfApp1.Models.MaterialGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_material_groups");

                    b.ToTable("material_groups");
                });

            modelBuilder.Entity("WpfApp1.Models.MaterialSubgroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_material_subgroups");

                    b.ToTable("material_subgroups");
                });

            modelBuilder.Entity("WpfApp1.Models.MeasurementUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("short_name");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_measurement_units");

                    b.ToTable("measurement_units");
                });

            modelBuilder.Entity("WpfApp1.Models.MeasurementUnitGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_measurement_unit_groups");

                    b.ToTable("measurement_unit_groups");
                });

            modelBuilder.Entity("WpfApp1.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .HasColumnType("longtext")
                        .HasColumnName("link");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("longtext")
                        .HasColumnName("short_name");

                    b.Property<string>("Slide")
                        .HasColumnType("longtext")
                        .HasColumnName("slide");

                    b.HasKey("Id")
                        .HasName("pk_models");

                    b.ToTable("models");
                });

            modelBuilder.Entity("WpfApp1.Models.Parameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeForConnection")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code_for_connection");

                    b.Property<int?>("ConnectionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("connection_type_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int?>("ExportId")
                        .HasColumnType("int")
                        .HasColumnName("export_id");

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("formula");

                    b.Property<int?>("Hidden")
                        .HasColumnType("int")
                        .HasColumnName("hidden");

                    b.Property<int?>("Initialize")
                        .HasColumnType("int")
                        .HasColumnName("initialize");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<float?>("ReadyPercentage")
                        .HasColumnType("float")
                        .HasColumnName("ready_percentage");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("short_name");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("symbol");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.Property<string>("TypeDate")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type_date");

                    b.HasKey("Id")
                        .HasName("pk_parameters");

                    b.HasIndex("ConnectionTypeId")
                        .HasDatabaseName("ix_parameters_connection_type_id");

                    b.HasIndex("ExportId")
                        .HasDatabaseName("ix_parameters_export_id");

                    b.ToTable("parameters");
                });

            modelBuilder.Entity("WpfApp1.Models.ParameterGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("symbol");

                    b.HasKey("Id")
                        .HasName("pk_parameter_group");

                    b.ToTable("parameter_group");
                });

            modelBuilder.Entity("WpfApp1.Models.ParameterValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ParameterId")
                        .HasColumnType("int")
                        .HasColumnName("parameter_id");

                    b.Property<string>("ParameterStringValue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("parameter_string_value");

                    b.Property<string>("UnitShortName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("unit_short_name");

                    b.HasKey("Id")
                        .HasName("pk_parameter_values");

                    b.HasIndex("ParameterId")
                        .HasDatabaseName("ix_parameter_values_parameter_id");

                    b.ToTable("parameter_values");
                });

            modelBuilder.Entity("WpfApp1.Models.Prefix", b =>
                {
                    b.Property<int>("PrefixId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("prefix_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PrefixId"));

                    b.Property<int?>("PrefixNumber")
                        .HasColumnType("int")
                        .HasColumnName("prefix_number");

                    b.Property<string>("PrefixText")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("prefix_text");

                    b.Property<float?>("ReadyPercentage")
                        .HasColumnType("float")
                        .HasColumnName("ready_percentage");

                    b.HasKey("PrefixId")
                        .HasName("pk_prefixes");

                    b.ToTable("prefixes");
                });

            modelBuilder.Entity("WpfApp1.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<DateTime?>("ProjectRegistrationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("project_registration_date");

                    b.Property<float?>("ReadyPercentage")
                        .HasColumnType("float")
                        .HasColumnName("ready_percentage");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("WpfApp1.Models.ProjectElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlueprintId")
                        .HasColumnType("int")
                        .HasColumnName("blueprint_id");

                    b.Property<int>("BuildId")
                        .HasColumnType("int")
                        .HasColumnName("build_id");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_editable");

                    b.Property<int>("ModelId")
                        .HasColumnType("int")
                        .HasColumnName("model_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_project_elements");

                    b.HasIndex("BlueprintId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_elements_blueprint_id");

                    b.HasIndex("BuildId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_elements_build_id");

                    b.HasIndex("ModelId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_elements_model_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_elements_project_id");

                    b.ToTable("project_elements");
                });

            modelBuilder.Entity("WpfApp1.Models.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("category");

                    b.Property<int?>("ParameterId")
                        .HasColumnType("int")
                        .HasColumnName("parameter_id");

                    b.Property<string>("Principles")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("principles");

                    b.Property<float?>("ReadyPercentage")
                        .HasColumnType("float")
                        .HasColumnName("ready_percentage");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_technologies");

                    b.HasIndex("ParameterId")
                        .HasDatabaseName("ix_technologies_parameter_id");

                    b.ToTable("technologies");
                });

            modelBuilder.Entity("WpfApp1.Models.TechnologyProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("int")
                        .HasColumnName("equipment_id");

                    b.Property<string>("Principles")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("principles");

                    b.Property<float?>("ReadyPercentage")
                        .HasColumnType("float")
                        .HasColumnName("ready_percentage");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_technology_processes");

                    b.HasIndex("EquipmentId")
                        .HasDatabaseName("ix_technology_processes_equipment_id");

                    b.ToTable("technology_processes");
                });

            modelBuilder.Entity("AnalysisTypeConstruction", b =>
                {
                    b.HasOne("WpfApp1.Models.AnalysisType", null)
                        .WithMany()
                        .HasForeignKey("AnalysisTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_analysis_type_construction_analysis_types_analysis_types_id");

                    b.HasOne("WpfApp1.Models.Construction", null)
                        .WithMany()
                        .HasForeignKey("ConstructionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_analysis_type_construction_constructions_constructions_id");
                });

            modelBuilder.Entity("AssortmentAssortmentRoll", b =>
                {
                    b.HasOne("WpfApp1.Models.AssortmentRoll", null)
                        .WithMany()
                        .HasForeignKey("AssortmentRollsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assortment_assortment_roll_assortment_rolls_assortment_rolls_~");

                    b.HasOne("WpfApp1.Models.Assortment", null)
                        .WithMany()
                        .HasForeignKey("AssortmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assortment_assortment_roll_assortments_assortments_id");
                });

            modelBuilder.Entity("AssortmentMaterial", b =>
                {
                    b.HasOne("WpfApp1.Models.Assortment", null)
                        .WithMany()
                        .HasForeignKey("AssortmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assortment_material_assortments_assortments_id");

                    b.HasOne("WpfApp1.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assortment_material_materials_materials_id");
                });

            modelBuilder.Entity("AssortmentParameterValue", b =>
                {
                    b.HasOne("WpfApp1.Models.Assortment", null)
                        .WithMany()
                        .HasForeignKey("AssortmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assortment_parameter_value_assortments_assortments_id");

                    b.HasOne("WpfApp1.Models.ParameterValue", null)
                        .WithMany()
                        .HasForeignKey("ParameterValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assortment_parameter_value_parameter_values_parameter_values_~");
                });

            modelBuilder.Entity("ConstructionInstructionPosition", b =>
                {
                    b.HasOne("WpfApp1.Models.Construction", null)
                        .WithMany()
                        .HasForeignKey("ConstructionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_construction_instruction_position_constructions_construction~");

                    b.HasOne("WpfApp1.Models.InstructionPosition", null)
                        .WithMany()
                        .HasForeignKey("InstructionPositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_construction_instruction_position_instruction_positions_instr~");
                });

            modelBuilder.Entity("ConstructionParameterValue", b =>
                {
                    b.HasOne("WpfApp1.Models.Construction", null)
                        .WithMany()
                        .HasForeignKey("ConstructionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_construction_parameter_value_constructions_constructions_id");

                    b.HasOne("WpfApp1.Models.ParameterValue", null)
                        .WithMany()
                        .HasForeignKey("ParameterValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_construction_parameter_value_parameter_values_parameter_value~");
                });

            modelBuilder.Entity("EquipmentMaterial", b =>
                {
                    b.HasOne("WpfApp1.Models.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equipment_material_equipments_equipments_id");

                    b.HasOne("WpfApp1.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equipment_material_materials_materials_id");
                });

            modelBuilder.Entity("EquipmentParameterValue", b =>
                {
                    b.HasOne("WpfApp1.Models.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equipment_parameter_value_equipments_equipments_id");

                    b.HasOne("WpfApp1.Models.ParameterValue", null)
                        .WithMany()
                        .HasForeignKey("ParameterValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_equipment_parameter_value_parameter_values_parameter_values_id");
                });

            modelBuilder.Entity("InstructionGroupPositionInstructionPosition", b =>
                {
                    b.HasOne("WpfApp1.Models.InstructionGroupPosition", null)
                        .WithMany()
                        .HasForeignKey("InstructionGroupPositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instruction_group_position_instruction_position_instruction_g~");

                    b.HasOne("WpfApp1.Models.InstructionPosition", null)
                        .WithMany()
                        .HasForeignKey("InstructionPositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instruction_group_position_instruction_position_instruction_p~");
                });

            modelBuilder.Entity("MaterialGroupMaterialSubgroup", b =>
                {
                    b.HasOne("WpfApp1.Models.MaterialGroup", null)
                        .WithMany()
                        .HasForeignKey("MaterialGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_material_group_material_subgroup_material_groups_material_gro~");

                    b.HasOne("WpfApp1.Models.MaterialSubgroup", null)
                        .WithMany()
                        .HasForeignKey("MaterialSubgroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_material_group_material_subgroup_material_subgroups_material_~");
                });

            modelBuilder.Entity("MaterialMaterialSubgroup", b =>
                {
                    b.HasOne("WpfApp1.Models.MaterialSubgroup", null)
                        .WithMany()
                        .HasForeignKey("MaterialSubgroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_material_material_subgroup_material_subgroups_material_subgro~");

                    b.HasOne("WpfApp1.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_material_material_subgroup_materials_materials_id");
                });

            modelBuilder.Entity("MaterialParameterValue", b =>
                {
                    b.HasOne("WpfApp1.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_material_parameter_value_materials_materials_id");

                    b.HasOne("WpfApp1.Models.ParameterValue", null)
                        .WithMany()
                        .HasForeignKey("ParameterValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_material_parameter_value_parameter_values_parameter_values_id");
                });

            modelBuilder.Entity("MeasurementUnitMeasurementUnitGroup", b =>
                {
                    b.HasOne("WpfApp1.Models.MeasurementUnitGroup", null)
                        .WithMany()
                        .HasForeignKey("MeasurementUnitGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_unit_measurement_unit_group_measurement_unit_group~");

                    b.HasOne("WpfApp1.Models.MeasurementUnit", null)
                        .WithMany()
                        .HasForeignKey("MeasurementUnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_unit_measurement_unit_group_measurement_units_mea~");
                });

            modelBuilder.Entity("ParameterParameterGroup", b =>
                {
                    b.HasOne("WpfApp1.Models.ParameterGroup", null)
                        .WithMany()
                        .HasForeignKey("ParameterGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parameter_parameter_group_parameter_group_parameter_group_id");

                    b.HasOne("WpfApp1.Models.Parameter", null)
                        .WithMany()
                        .HasForeignKey("ParametersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parameter_parameter_group_parameters_parameters_id");
                });

            modelBuilder.Entity("ParameterValuePrefix", b =>
                {
                    b.HasOne("WpfApp1.Models.ParameterValue", null)
                        .WithMany()
                        .HasForeignKey("ParameterValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parameter_value_prefix_parameter_values_parameter_values_id");

                    b.HasOne("WpfApp1.Models.Prefix", null)
                        .WithMany()
                        .HasForeignKey("PrefixesPrefixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parameter_value_prefix_prefixes_prefixes_prefix_id");
                });

            modelBuilder.Entity("ParameterValueProject", b =>
                {
                    b.HasOne("WpfApp1.Models.ParameterValue", null)
                        .WithMany()
                        .HasForeignKey("ParameterValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parameter_value_project_parameter_values_parameter_values_id");

                    b.HasOne("WpfApp1.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parameter_value_project_projects_projects_id");
                });

            modelBuilder.Entity("ParameterValueTechnology", b =>
                {
                    b.HasOne("WpfApp1.Models.ParameterValue", null)
                        .WithMany()
                        .HasForeignKey("ParameterValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parameter_value_technology_parameter_values_parameter_values_~");

                    b.HasOne("WpfApp1.Models.Technology", null)
                        .WithMany()
                        .HasForeignKey("TechnologiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parameter_value_technology_technologies_technologies_id");
                });

            modelBuilder.Entity("ParameterValueTechnologyProcess", b =>
                {
                    b.HasOne("WpfApp1.Models.ParameterValue", null)
                        .WithMany()
                        .HasForeignKey("ParameterValuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parameter_value_technology_process_parameter_values_parameter~");

                    b.HasOne("WpfApp1.Models.TechnologyProcess", null)
                        .WithMany()
                        .HasForeignKey("TechnologyProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parameter_value_technology_process_technology_processes_techn~");
                });

            modelBuilder.Entity("PrefixTechnologyProcess", b =>
                {
                    b.HasOne("WpfApp1.Models.Prefix", null)
                        .WithMany()
                        .HasForeignKey("PrefixesPrefixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prefix_technology_process_prefixes_prefixes_prefix_id");

                    b.HasOne("WpfApp1.Models.TechnologyProcess", null)
                        .WithMany()
                        .HasForeignKey("TechnologyProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prefix_technology_process_technology_processes_technology_pro~");
                });

            modelBuilder.Entity("TechnologyTechnologyProcess", b =>
                {
                    b.HasOne("WpfApp1.Models.Technology", null)
                        .WithMany()
                        .HasForeignKey("TechnologiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_technology_technology_process_technologies_technologies_id");

                    b.HasOne("WpfApp1.Models.TechnologyProcess", null)
                        .WithMany()
                        .HasForeignKey("TechnologyProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_technology_technology_process_technology_processes_technology~");
                });

            modelBuilder.Entity("WpfApp1.Models.Construction", b =>
                {
                    b.HasOne("WpfApp1.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_constructions_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WpfApp1.Models.ConstructionDocument", b =>
                {
                    b.HasOne("WpfApp1.Models.Construction", "Construction")
                        .WithMany()
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_construction_documents_constructions_construction_id");

                    b.Navigation("Construction");
                });

            modelBuilder.Entity("WpfApp1.Models.ConstructionIncidence", b =>
                {
                    b.HasOne("WpfApp1.Models.Construction", "Construction")
                        .WithMany()
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_construction_incidences_constructions_construction_id");

                    b.Navigation("Construction");
                });

            modelBuilder.Entity("WpfApp1.Models.Parameter", b =>
                {
                    b.HasOne("WpfApp1.Models.ConnectionType", "ConnectionType")
                        .WithMany()
                        .HasForeignKey("ConnectionTypeId")
                        .HasConstraintName("fk_parameters_connection_types_connection_type_id");

                    b.HasOne("WpfApp1.Models.Export", "Export")
                        .WithMany()
                        .HasForeignKey("ExportId")
                        .HasConstraintName("fk_parameters_exports_export_id");

                    b.Navigation("ConnectionType");

                    b.Navigation("Export");
                });

            modelBuilder.Entity("WpfApp1.Models.ParameterValue", b =>
                {
                    b.HasOne("WpfApp1.Models.Parameter", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_parameter_values_parameters_parameter_id");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("WpfApp1.Models.ProjectElement", b =>
                {
                    b.HasOne("WpfApp1.Models.Blueprint", "Blueprint")
                        .WithOne("ProjectElement")
                        .HasForeignKey("WpfApp1.Models.ProjectElement", "BlueprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_elements_blueprints_blueprint_id");

                    b.HasOne("WpfApp1.Models.Build", "Build")
                        .WithOne("ProjectElement")
                        .HasForeignKey("WpfApp1.Models.ProjectElement", "BuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_elements_builds_build_id");

                    b.HasOne("WpfApp1.Models.Model", "Model")
                        .WithOne("ProjectElement")
                        .HasForeignKey("WpfApp1.Models.ProjectElement", "ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_elements_models_model_id");

                    b.HasOne("WpfApp1.Models.Project", "Project")
                        .WithMany("Elements")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_elements_projects_project_id");

                    b.Navigation("Blueprint");

                    b.Navigation("Build");

                    b.Navigation("Model");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WpfApp1.Models.Technology", b =>
                {
                    b.HasOne("WpfApp1.Models.Parameter", null)
                        .WithMany("Technologies")
                        .HasForeignKey("ParameterId")
                        .HasConstraintName("fk_technologies_parameters_parameter_id");
                });

            modelBuilder.Entity("WpfApp1.Models.TechnologyProcess", b =>
                {
                    b.HasOne("WpfApp1.Models.Equipment", null)
                        .WithMany("TechnologyProcesses")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("fk_technology_processes_equipments_equipment_id");
                });

            modelBuilder.Entity("WpfApp1.Models.Blueprint", b =>
                {
                    b.Navigation("ProjectElement")
                        .IsRequired();
                });

            modelBuilder.Entity("WpfApp1.Models.Build", b =>
                {
                    b.Navigation("ProjectElement")
                        .IsRequired();
                });

            modelBuilder.Entity("WpfApp1.Models.Equipment", b =>
                {
                    b.Navigation("TechnologyProcesses");
                });

            modelBuilder.Entity("WpfApp1.Models.Model", b =>
                {
                    b.Navigation("ProjectElement")
                        .IsRequired();
                });

            modelBuilder.Entity("WpfApp1.Models.Parameter", b =>
                {
                    b.Navigation("Technologies");
                });

            modelBuilder.Entity("WpfApp1.Models.Project", b =>
                {
                    b.Navigation("Elements");
                });
#pragma warning restore 612, 618
        }
    }
}
